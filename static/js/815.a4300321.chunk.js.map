{"version":3,"file":"static/js/815.a4300321.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1-js/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-kabzda-1-js/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-kabzda-1-js/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"images\":\"ProfileInfo_images__snE5Y\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\"};","import {useState, useEffect} from 'react';\n\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    // Вторым параметром когда передаём пустой массив, мы говорим ему что бы он отрисовался всего один раз\n    // либо он будет запускаться каждый раз когда у тебя будет изменён props.status и у тебя зависимость уже\n    // не пустая.\n    // Если мы не передаём массив, то useEffect будет запускаться каждый раз после отрисовки компонента.\n    // Хуки запрещено писать в условиях, так же в циклах.\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value) \n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;\n","import s from './ProfileInfo.module.css';\nimport Preloader from '../../Common/Preloader/Preloader';\nimport userPhoto from '../../../assets/images/user.jpeg';\n// import ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\n\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}) => {\n    if (!profile) {\n        return (\n            <Preloader />\n        )\n    }\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n    return (\n        <div>\n            {/* <div>\n                <img src=\"https://azovsky.ru/uploads/images/articles/plyazhi-yalty-5-n.jpg\" alt=\"\" className={s.images}/>\n            </div> */}\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large != null ? profile.photos.large : userPhoto} alt=\"\" className={s.mainPhoto} />\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n                {/* <ProfileStatus status={props.status} updateStatus={props.updateStatus} /> */}\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n            </div>\n        </div>\n    )\n}\n\n\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import s from './Post.module.css';\n\n\nconst Post = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://cdn.wionews.com/sites/default/files/2018/09/12/20463-web%25252520default%25252520%2525283%252529-20170328074902.png\" alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Post;\n","import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\n\n\nconst maxLength = maxLengthCreator(10);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {/* Созданная ссылка на 10 строчке ссылается на тебя и с помощью ref мы стучимся напрямую к DOM элементу а нужно к Virtual DOM */}\n                {/* <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} /> */}\n                <Field placeholder={\"Post message\"} \n                    //    component={\"textarea\"}\n                       component={Textarea} \n                       name={\"newPostText\"}\n                       validate={[required, maxLength]} \n                /> \n            </div>\n            <div>\n                {/* <button onClick={onAddPost}>Add post</button> */}\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst AddNewPostFormRedux = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm)\n\n\n// React.memo тоже самое что и в классовых компонентах метод жизненного цикла shouldComponentUpdate.\nconst MyPosts = React.memo((props) => {\n\n    // console.log('MyPosts');\n\n    let postsElements = \n        [...props.posts]\n            .reverse()\n            .map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\n\n    let newPostElement = React.createRef();  // Создаём ссылку на какой то элемент\n\n    // let onAddPost = () => {\n    //     props.addPost();\n    // };\n\n    // let onPostChange = () => {\n    //     let text = newPostElement.current.value;  // current ссылается на нативный html элемент, и у этого элемента мы берём значение\n    //     props.updateNewPostText(text);\n    // };\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost} />\n            <div className={s.posts}>\n                { postsElements }\n            </div>\n        </div>\n    )\n});\n\n\n// class MyPosts extends React.Component {\n\n//     // Метод жизненного цикла(shouldComponentUpdate) с помощью которого рякт спрашивает у компоненты,\n//     // нужно ли тебя компоненту перерисовать, перерендерить.\n//     // class MyPosts extends React.PureComponent {} это пюр компонент такой же компонент с тем же \n//     // самым методом жизненного цикла shouldComponentUpdate, только этот метод уже сидит там внутри \n//     // этого компонента и не нужно его обьявлять самому.\n//     shouldComponentUpdate(nextProps, nextState) {\n//         return nextProps !== this.props || nextState !== this.state;\n//     }\n\n//     render() {\n//         console.log('MyPosts');\n//         let postsElements = this.props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\n\n//         let newPostElement = React.createRef();\n\n//         let onAddPost = (values) => {\n//             this.props.addPost(values.newPostText);\n//         };\n\n//         return (\n//             <div className={s.postsBlock}>\n//                 <h3>My posts</h3>\n//                 <AddNewPostFormRedux onSubmit={onAddPost} />\n//                 <div className={s.posts}>\n//                     { postsElements }\n//                 </div>\n//             </div>\n//         )\n\n//     }\n// }\n\n\nexport default MyPosts;\n","import {connect} from \"react-redux\";\n// import StoreContext from \"../../../StoreContext\";\nimport MyPosts from \"./MyPosts\";\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\n\n\n// const MyPostsContainer = () => {\n//     return (\n//         <StoreContext.Consumer>\n//             { (store) => {\n\n//                 let state = store.getState();\n\n//                 let addPost = () => {\n//                     store.dispatch(addPostActionCreator());\n//                 };\n\n//                 let onPostChange = (text) => {\n//                     let action = updateNewPostTextActionCreator(text);\n//                     store.dispatch(action);\n//                 };\n\n//                 return (\n//                     <MyPosts addPost={addPost}\n//                              updateNewPostText={onPostChange}\n//                              posts={state.profilePage.posts}\n//                              newPostText={state.profilePage.newPostText}\n//                     />\n//                 )\n//             } }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        // newPostText: state.profilePage.newPostText\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        },\n        // updateNewPostText: (text) => {\n        //     let action = updateNewPostTextActionCreator(text);\n        //     dispatch(action);\n        // }\n    }\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\n\n\nexport default MyPostsContainer;\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                        isOwner={props.isOwner}\n                        profile={props.profile}\n                        status={props.status}\n                        updateStatus={props.updateStatus} \n            />\n            <MyPostsContainer />\n        </div>\n    )\n}\n\n\nexport default Profile;\n","import React from 'react';\nimport {compose} from \"redux\";\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport Profile from './Profile';\nimport {getUserProfile, getStatus, updateStatus, savePhoto} from '../../redux/profile-reducer';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\n\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.router.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n            \n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        // let userId = this.props.router.params.userId;\n        // if (!userId) {\n        //     // userId = 2;\n        //     // userId = 27124;\n        //     userId = this.props.authorizedUserId;\n        //     if (!userId) {\n        //         // // редирект на login, но лучше не использовать этот метод, потому что мы вмешиваемся\n        //         // // в жизненный цикл компоненты и поэтому редиректы лучше делать через render,\n        //         // // jsx-ом редирект делать\n        //         // this.props.history.push(\"/login\");\n        //     }\n        // }\n        // this.props.getUserProfile(userId);\n        // this.props.getStatus(userId);\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\n            this.refreshProfile();\n        }\n    }\n    \n    render() {\n        // console.log('RENDER PROFILE')\n        return (\n            <div>\n                <Profile {...this.props}\n                        isOwner={!this.props.router.params.userId} \n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatus}\n                        savePhoto={this.props.savePhoto}\n                />\n            </div>\n        )\n    };\n};\n\nlet mapStateToProps = (state) => {\n    // console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n};\n\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\n\nfunction withRouter(Component) {\n    function ComponentWithRouterProp(props) {\n        let location = useLocation();\n        let navigate = useNavigate();\n        let params = useParams();\n        return (\n            <Component {...props} router={{ location, navigate, params }} />\n        );\n    }\n\n    return ComponentWithRouterProp;\n}\n\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n\n// compose(\n//     connect(mapStateToProps, {getUserProfile}),\n//     withRouter,\n//     withAuthRedirect\n// )(ProfileContainer);\n\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\n    withRouter,\n    // withAuthRedirect\n)(ProfileContainer);\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","isOwner","savePhoto","Preloader","className","s","src","photos","large","userPhoto","alt","type","target","files","length","message","likesCount","maxLength","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","React","postsElements","posts","reverse","map","p","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}