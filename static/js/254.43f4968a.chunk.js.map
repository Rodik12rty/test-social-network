{"version":3,"file":"static/js/254.43f4968a.chunk.js","mappings":"gMACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCahL,EAVmB,SAACA,GAChB,IAAIC,EAAS,YAAcD,EAAME,GACjC,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAS,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAO,SAAED,EAAMM,QAGxC,ECCA,EATgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAAA,QAAU,SACrBJ,EAAMO,SAGnB,E,uCCJMC,GAAYC,EAAAA,EAAAA,GAAiB,IAuBnC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAhC,EArBuB,SAACX,GACpB,OACI,kBAAMY,SAAUZ,EAAMa,aAAa,WAC/B,0BAEI,SAACC,EAAA,EAAK,CAACC,YAAa,qBAEbC,UAAWC,EAAAA,GACXX,KAAM,iBACNY,SAAU,CAACC,EAAAA,EAAUX,QAGhC,0BAEI,yCAIhB,IC+CA,EAvCgB,SAACR,GAEb,IAAIoB,EAAkBpB,EAAMqB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAClB,KAAMkB,EAAElB,KAAMJ,GAAIsB,EAAEtB,IAASsB,EAAEtB,GAAM,IAEtGuB,EAAmBzB,EAAMqB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACpB,QAASoB,EAAEpB,SAAcoB,EAAEzB,GAAM,IAEhFF,EAAMqB,YAAYO,eAiBvC,OACI,iBAAKzB,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,aAAe,SACzBgB,KAEN,gBAAKjB,UAAWC,EAAAA,SAAW,UACvB,yBACKqB,OAGT,SAAC,EAAc,CAACb,SAhBJ,SAACiB,GACjB7B,EAAM8B,YAAYD,EAAOD,eAC7B,MAiBJ,E,oBCVA,GAAeG,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KA5BkB,SAACC,GACnB,MAAO,CACHZ,YAAaY,EAAMZ,YAE3B,IAEyB,SAACa,GACtB,MAAO,CACHJ,YAAa,SAACF,GACVM,GAASC,EAAAA,EAAAA,GAAmBP,GAChC,EAKR,IAcIQ,EAAAA,EAFJ,CAGEC,E","sources":["webpack://react-kabzda-1-js/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\n\nconst DialogItem = (props) => {\n    let myPath = \"/dialogs/\" + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={myPath}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;\n","import s from \"../Dialogs.module.css\";\n\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}\n\n\nexport default Message;\n","import {Field, reduxForm} from \"redux-form\";\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\"; \nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\n\n\nconst maxLength = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {/* <textarea onChange={onNewMessageChange} value={newMessageBody} placeholder='Enter your message'/> */}\n                <Field placeholder={\"Enter your message\"} \n                    //    component={\"textarea\"}\n                       component={Textarea}\n                       name={\"newMessageBody\"}\n                       validate={[required, maxLength]} \n                />\n            </div>\n            <div>\n                {/* <button onClick={onSendMessageClick}>Send</button> */}\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\n\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\n","import React from \"react\";\n// import {Navigate} from 'react-router-dom';\n// import {Field, reduxForm} from \"redux-form\";\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\n// import {required, maxLengthCreator} from \"../../utils/validators/validators\"; \n// import {Textarea} from \"../Common/FormsControls/FormsControls\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\n\n// const maxLength = maxLengthCreator(50);\n\n// const AddMessageForm = (props) => {\n//     return (\n//         <form onSubmit={props.handleSubmit}>\n//             <div>\n//                 {/* <textarea onChange={onNewMessageChange} value={newMessageBody} placeholder='Enter your message'/> */}\n//                 <Field placeholder={\"Enter your message\"} \n//                     //    component={\"textarea\"}\n//                        component={Textarea}\n//                        name={\"newMessageBody\"}\n//                        validate={[required, maxLength]} \n//                 />\n//             </div>\n//             <div>\n//                 {/* <button onClick={onSendMessageClick}>Send</button> */}\n//                 <button>Send</button>\n//             </div>\n//         </form>\n//     )\n// }\n\nconst Dialogs = (props) => {\n\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />);\n\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />);\n\n    let newMessageBody = props.dialogsPage.newMessageBody;\n\n    // let onSendMessageClick = () => {\n    //     props.sendMessage();\n    // };\n\n    // let onNewMessageChange = (e) => {\n    //     let body = e.target.value;\n    //     props.updateNewMessageBody(body);\n    // };\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody);\n    };\n\n    // if (!props.isAuth) return <Navigate to={\"/login\"} />\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsElements }\n            </div>\n            <div className={s.messages}>\n                <div>\n                    {messagesElements}\n                </div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\n\nexport default Dialogs;\n","// import StoreContext from \"../../StoreContext\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\n\n\n// const DialogsContainer = () => {\n//     return (\n//         <StoreContext.Consumer>\n//             { (store) => {\n//                 let state = store.getState().dialogsPage;\n\n//                 let onSendMessageClick = () => {\n//                     store.dispatch(sendMessageCreator());\n//                 };\n\n//                 let onNewMessageChange = (body) => {\n//                     store.dispatch(updateNewMessageBodyCreator(body));\n//                 };\n//                 return (\n//                     <Dialogs sendMessage={onSendMessageClick}\n//                              updateNewMessageBody={onNewMessageChange}\n//                              dialogsPage={state}\n//                     />\n//                 )\n//             } }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody));\n        },\n        // updateNewMessageBody: (body) => {\n        //     dispatch(updateNewMessageBodyCreator(body));\n        // }\n    }\n};\n\n// // let AuthRedirectComponent = withAuthRedirect(Dialogs);\n\n// // const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\n\n// compose(\n//     connect(mapStateToProps, mapDispatchToProps),\n//     withAuthRedirect\n// )(Dialogs);\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);;\n"],"names":["props","myPath","id","className","s","to","name","message","maxLength","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","newMessageBody","values","sendMessage","compose","connect","state","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}